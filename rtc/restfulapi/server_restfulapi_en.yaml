openapi: 3.0.0
info:
  description: >
    This article contains detailed help for the Server RESTful APIs and provides the **Try it out** feature which enables you to send RESTful API requests and receive responses directly on the web page.

    ## Authentication

    The RESTful APIs only support HTTPS. Before sending HTTP requests, you must generate a Base64-encoded credential with the Customer ID and Customer Secret provided by Agora, and pass the credential to the `Authorization` parameter in the request header.


    You can find your Customer ID and Customer Secret on the [RESTful API](https://console.agora.io/restfulApi) page in Agora Console. See [RESTful API authentication](https://docs.agora.io/en/faq/restful_authentication) for how to generate the credential. You can also generate it by using the **Try it out** feature on this page.


    ## Data format

    All the request URLs and request bodies are case sensitive. Both the request and response contents are in JSON format.

    ## Functions

    The RESTful APIs provide you with the following functions:
    <ul>
      <li>Creates and manages Agora projects.</li>
      <li>Gets the usage data of a specified project.</li>
      <li>Creates and gets the rules of banning user privileges.</li>
      <li>Gets information about user roles, user lists, and channel lists.</li>
    </ul>

    <div class="info-msg"><i class="fa fa-warning"></i> The call frequency of each online channel statistics query API is no more than 20 queries per second, and the call frequency of each other API is no more than 10 queries per second. If you are frequency limited when calling the APIs, please see <a href="https://docs.agora.io/en/faq/restful_api_call_frequency">How can I avoid being frequency limited when calling Agora Server RESTful APIs?</a> to optimize API call frequency.</div>


    ## <a name="tryapi"></a>Try out the API

    You can use **Try it out** to send RESTful API requests and receive responses directly on the web page. You must get authorized before sending any request. Click **Authorize** below, enter your Customer ID in **Username** and Customer Secret in **Password**, and then click **Authorize**.


    <img style="display:block;" src="https://web-cdn.agora.io/docs-files/1593314309962" alt="Authorize" width="50%">

    <div class="info-msg"><i class="fa fa-warning"></i> All the RESTful API requests sent from the web page take effect on your projects. If you just want to try the functions of the APIs, Agora recommends that you create and use a test project.</div>


    ## Parameter descriptions

    To view the description of each parameter, click **Schema**.

    <img style="display:block;" src="https://web-cdn.agora.io/docs-files/1601374744792" alt="Schema" width="50%">

  version: 2020.07.29
  title: Server RESTful API
servers:
  - url: https://api.agora.io
tags:
- name: "Project management"
security:
  - agora_auth: []
paths:
  /dev/v1/project:
    post:
      tags:
      - "Project management"
      summary: Creates a project
      operationId: createProject
      description: Creates an Agora project.

            <div class="info-msg"><i class="fa fa-warning"></i> You can create up to 10 projects, including any previously deleted. If you need to create more projects, please contact us by <a href="https://agora-ticket.agora.io/">submitting a ticket</a >.</div>
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/createProject'
      responses:
        '201':
          description: The request has been fulfilled, resulting in the creation of a new resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createProject_response'
              example:
                project:
                  id: xxxx
                  name: project1
                  vendor_key: 4855xxxxxxxxxxxxxxxxxxxxxxxxeae2
                  sign_key: 4855xxxxxxxxxxxxxxxxxxxxxxxxeae2
                  recording_server: null
                  status: 1
                  created: 1464165672
        '400':
          description: >-
                   Bad request. Possible reasons:
                   <ul>
                   <li>Duplicate project name.</li>
                   <li>Vendor is blocked.</li>
                   <li>The number of projects exceeds the maximum limit.</li>
                   </ul>
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
      - "Project management"
      summary: Gets a specified project
      operationId: getProject
      description: Gets the information of a specified project.
      parameters:
        - name: id
          required: true
          in: query
          description: The project ID, which can be obtained by calling the Gets all projects API.
          schema:
            type: string
        - name: name
          required: true
          in: query
          description: The project name.
          schema:
            type: string
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProject_response'
              example:
                "projects":
                  [
                    {
                    "id": "xxxx",
                    "name": "project1",
                    "vendor_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "sign_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "recording_server": null,
                    "status": 1,
                    "created": 1464165672
                    }
                  ]
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
      - "Project management"
      summary: Deletes a project
      operationId: deleteProject
      description: Deletes a specified Agora project.
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/deleteProject'
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteProject_response'
              example:
                "success": true
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/projects:
    get:
      tags:
      - "Project management"
      summary: Gets all projects
      operationId: projects
      description: Gets the information of all your Agora projects.

      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjects_response'
              example:
                "projects": [
                  {
                    "id": "xxxx",
                    "name": "project1",
                    "vendor_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "sign_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "recording_server": null,
                    "status": 1,
                    "created": 1464165672
                  }
                  ]
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/project_status:
    post:
      tags:
      - "Project management"
      summary: Disables or enables a project
      operationId: changeProjectStatus
      description: Disables or enables a specified Agora project.
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/changeProjectStatus'
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/changeProjectstatus_response'
              example:
                "project":
                  {
                    "id": "xxxx",
                    "name": "project1",
                    "vendor_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "sign_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "recording_server": null,
                    "status": 0,
                    "created": 1464165672
                  }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/recording_config:
   post:
      tags:
      - "Project management"
      summary: Sets the IP of the recording server
      operationId: setRecordingServer
      description: Sets the IP of the recording server for a specified project.
      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/setRecordingServer'
      responses:
        '200':
          description: The request is successful.
          content:
              application/json:
               schema:
                 $ref: '#/components/schemas/setRecordingServer_response'
               example:
                 "project":
                    {
                      "id": "xxxx",
                      "name": "project1",
                      "vendor_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                      "sign_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                      "recording_server": null,
                      "status": 1,
                      "created": 1464165672
                    }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/signkey:
   post:
      tags:
      - "Project management"
      summary: Enables or disables the primary App Certificate
      operationId: changeSignKey
      description: Enables or disables the primary App Certificate for a specified project.

      requestBody:
        $ref: '#/components/requestBodies/changeSignKey'

      responses:
        '200':
          description: The request is successful.
          content:
              application/json:
               schema:
                  $ref: '#/components/schemas/changeSignKey_response'
               example:
                  "project":
                    {
                      "id": "xxxx",
                      "name": "project1",
                      "vendor_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                      "sign_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                      "recording_server": null,
                      "status": 1,
                      "created": 1464165672
                    }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/reset_signkey:
   post:
      tags:
      - "Project management"
      summary: Resets the primary App Certificate
      operationId: resetSignKey
      description: Resets the primary App Certificate for a specified project.
        <div class="warning-msg"><i class="fa fa-warning"></i> Note:</br><ul><li>If the primary App Certificate is leaked, use this method to reset it.</li><li>If the primary App Certificate has not been enabled, calling this method automatically enables it.</li></ul></div>
      requestBody:
        $ref: '#/components/requestBodies/resetSignKey'

      responses:
        '200':
          description: The request is successful.
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/resetSignKey_response'
              example:
                "project":
                  {
                    "id": "xxxx",
                    "name": "project1",
                    "vendor_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "sign_key": "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    "recording_server": null,
                    "status": 1,
                    "created": 1464165672
                  }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v3/usage:
    get:
      tags:
      - "Project usage query"
      summary:  Gets usage data
      operationId: getProjectUsagesV3
      description: Gets the usage data within one year of a specified project.<br>
                  <div class="warning-msg"><i class="fa fa-warning"></i> Note:</br><ul><li>Ensure that you fill in a valid project ID, otherwise, you cannot get the usage information.</li><li>Agora recommends not including the current day in your query period, because the data is continuously changing on the current day.</li></ul></div>
      parameters:
        - name: project_id
          required: true
          in: query
          description: The project ID, which can be obtained by calling the Gets all projects API.
          schema:
            type: string
        - name: from_date
          required: true
          in: query
          description: The start date of the query, UTC time. For example, 2020-01-01.
          schema:
            type: string
        - name: to_date
          required: true
          in: query
          description: The end date of the query, UTC time. For example, 2020-01-31.
          schema:
            type: string
        - name: business
          required: true
          in: query
          description: >-
            The business type. You can choose the following values:
              - `default`: Audio and video. The usage on Miniapp is not included.
              - `transcodeDuration`: Transcoding.
              - `recording`: On-premise Recording.
              - `cloudRecording`: Cloud Recording.
              - `miniapp`: Miniapp.
          schema:
            type: string
      responses:
        '200':
          description: The request is successful.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProjectUsagesV3_response'
              example:
                {
                  "meta": {
                      "durationAudioAll": {
                          "cn": "总音频时长",
                          "en": "Total Audio Duration",
                          "unit": "second"
                      },
                      "durationVideoHd": {
                          "cn": "HD视频时长（含本地服务端录制）",
                          "en": "HD Video Duration (including On-premise Recording)",
                          "unit": "second"
                      },
                      "durationVideoHdp": {
                          "cn": "HDP视频时长（含本地服务端录制）",
                          "en": "HDP Video Duration（including On-premise Recording)",
                          "unit": "second"
                      }
                  },
                  "usages": [
                      {
                          "date": "2020-03-01T00:00:00.000Z",
                          "usage": {
                              "durationAudioAll": 0,
                              "durationVideoHd": 0,
                              "durationVideoHdp": 0
                          }
                      }
                  ]
                  }
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/kicking-rule:
    post:
      tags:
      - "Banning user privileges"
      summary: Creates a banning rule
      operationId: createKickingRule
      description: >-
                  Creates a rule of banning user privileges.<br>
                  The user privileges (`privileges`) that can be banned include:
                    - `join_channel`: Joining a channel.
                    - `publish_audio`: Publishing audio.
                    - `publish_video`: Publishing video.

                  The banning rule works based on the three fields: `cname`, `uid`, and `ip`.
                    - When you set `privileges` as `join_channel`, the rule works as follows:
                      - If you set `ip`, but not `cname` and `uid`, then the users with this `ip` cannot join any channel in the app.
                      - If you set `cname`, but not `uid` and `ip`, then no one can join the channel specified by the `cname` field.
                      - If you set `uid`, but not `cname` and `ip`, then the user with the ID cannot join any channel in the app.
                      - If you set `cname` and `uid`, but not `ip`, then the user with the ID cannot join the channel specified by the `cname` field.

                    - When you set `privileges` as `publish_audio` or `publish_video`, the rule works as follows:
                      - If you set `ip`, but not `cname` and `uid`, then the users with this `ip` cannot publish audio or video in any channel of the app.
                      - If you set `cname`, but not `uid` and `ip`, then no one can publish audio or video in the channel specified by the `cname` field.
                      - If you set `uid`, but not `cname` and `ip`, then the user with the ID cannot publish audio or video in any channel of the app.
                      - If you set `cname` and `uid`, but not `ip`, then the user with the ID cannot publish audio or video in the channel specified by the `cname` field.

                  The user who is kicked out of a channel receives the corresponding callback as follows:
                    - Android: `onConnectionStateChanged` callback reports `CONNECTION_CHANGED_BANNED_BY_SERVER(3)`.
                    - iOS/macOS: `connectionChangedToState` callback reports `AgoraConnectionChangedBannedByServer(3)`.
                    - Web: `Client.on("client-banned")` callback.
                    - Windows: `onConnectionStateChanged` callback reports `CONNECTION_CHANGED_BANNED_BY_SERVER(3)`.
                    - Electron: `AgoraRtcEngine.on("connectionStateChanged")` callback reports `3`.
                    - Unity: `OnConnectionStateChangedHandler` callback reports `CONNECTION_CHANGED_BANNED_BY_SERVER(3)`.


      parameters: []
      requestBody:
        $ref: '#/components/requestBodies/createKickingRule'

      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createKickingRule_response'
              example:
                 status: "success"
                 id: 1953
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    get:
      tags:
      - "Banning user privileges"
      summary: Gets the rule list
      operationId: listKickingRule
      description: Gets a list of all banning rules.
      parameters:
        - name: appid
          required: true
          in: query
          description: The App ID of the project.
          schema:
            type: string
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listKickingRule_response'
              example:
               status: "success"
               ruls: [
                  {
                    id: 1953,
                    appid: "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2",
                    uid: 589517928,
                    opid: 1406,
                    cname: "11",
                    ip: "192.168.0.1",
                    ts: "2018-01-09T07:23:06.000Z",
                    privileges: [
                      "join_channel"
                    ],
                    createAt: "2018-01-09T06:23:06.000Z",
                    updateAt: "2018-01-09T14:23:06.000Z",
                }
                ]
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    # put:
    #   tags:
    #   - "Banning rule management"
    #   summary: Updates the rule time
    #   operationId: updateKickingRule
    #   description: Updates the expiration time of a specified banning rule.
#
    #   requestBody:
    #     $ref: '#/components/requestBodies/updateKickingRule'
#
    #   responses:
    #     '200':
    #       description: The request is successful.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/updateKickingRule_response'
    #           example:
    #              status: "success"
    #              result:
    #               id: 1953
    #               ts: "2018-01-09T08:45:54.545Z"
    #     '400':
    #       $ref: '#/components/responses/400'
    #     '401':
    #       $ref: '#/components/responses/401'
    #     '403':
    #       $ref: '#/components/responses/403'
    #     '404':
    #       $ref: '#/components/responses/404'
    #     '415':
    #       $ref: '#/components/responses/415'
    #     '429':
    #       $ref: '#/components/responses/429'
    #     '500':
    #       $ref: '#/components/responses/500'


    # delete:
    #   tags:
    #   - "Banning rule management"
    #   summary: Deletes the rule
    #   operationId: deleteKickingRule
    #   description: Deletes a specified banning rule.
#
    #   requestBody:
    #     $ref: '#/components/requestBodies/deleteKickingRule'
#
    #   responses:
    #     '200':
    #       description: The request is successful.
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/deleteKickingRule_response'
    #           example:
    #              status: "success"
    #              id: 1953
    #     '400':
    #       description: >-
    #                Bad request. Possible reasons:
    #                <ul>
    #                <li>Unsupported media type. Make sure that you set <code>Content-Type</code> in <code>Headers</code> as <code>application/json</code>.</li>
    #                </ul>
    #     '401':
    #       $ref: '#/components/responses/401'
    #     '403':
    #       $ref: '#/components/responses/403'
    #     '404':
    #       $ref: '#/components/responses/404'
    #     '429':
    #       $ref: '#/components/responses/429'
    #     '500':
    #       $ref: '#/components/responses/500'
  /dev/v1/channel/user/property/{appid}/{uid}/{channelName}:
    get:
      tags:
      - "Online channel statistics query"
      summary: Gets the user role
      operationId: userProperty
      description: This method checks if a specified user is in a specified channel, and if yes, the role of this user in the channel.
      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID of the project.
        - in: path
          name: uid
          required: true
          schema:
            type: number
          description: The user ID.

                        <div class="info-msg"><i class="fa fa-warning"></i> This API does not support string user accounts. Ensure that you use the integer user ID.</div>
        - in: path
          name: channelName
          required: true
          schema:
            type: string
          description: The channel name.
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userProperty_response'
              example:
                success: true
                data:
                    join: 1592289039
                    in_channel: true
                    role: 2

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/channel/user/{appid}/{channelName}:
    get:
      tags:
      - "Online channel statistics query"
      summary: Gets the user list
      operationId: userList
      description: >-
       This method gets the user list.
        - In the Communication profile, this method gets the list of all users in the channel.
        - In the Live-broadcast profile, this method gets the list of all hosts and audience in the channel.
        <div class="info-msg"><i class="fa fa-warning"> Note</i><ul>
        <li>Users in a channel must use the same channel profile; otherwise, the query results may be inaccurate.</li>
        <li>You can synchronize the online channel statistics either by calling this method or by calling the <a href="https://docs.agora.io/en/rtc/restfulapi/#/Online%20channel%20statistics%20query/userProperty">Gets the user role</a > method. Compared with the Gets the user role method, this method requires a lower call frequency and has a higher query efficiency. Therefore, Agora recommends using this method to query online channel statistics.</li></ul></div>
      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID of the project.
        - in: path
          name: channelName
          required: true
          schema:
            type: string
          description: The channel name.
      responses:
        '200':
          description: The request is successful.</br>
            <div class="info-msg"><i class="fa fa-warning"></i> The response of this method differs with the channel profile.</div>
          content:
                application/json:
                  schema:
                      $ref: '#/components/schemas/userList_response'
                  examples:
                    Communication profile:
                        value:
                          success: true
                          data:
                            channel_exist: true
                            mode: 1
                            total: 1
                            users: [<uid>]
                    Live-broadcast profile:
                        value:
                          success: true
                          data:
                            channel_exist: true
                            mode: 2
                            broadcasters: [<uid>]
                            audience: [<uid>]
                            audience_total: <count>
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /dev/v1/channel/{appid}:
    get:
      tags:
      - "Online channel statistics query"
      summary: Gets the channel list
      description: Gets the channel list of a specified project.</br>
            <div class="info-msg"><i class="fa fa-warning"></i> If the number of users in a channel changes frequently, the query results may be inaccurate. The following situations may occur:<ul><li>A channel appears repeatedly in different pages.</li><li>A channel does not appear in any page.</li></ul></div>
      operationId: channelList
      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID of the project.
        - in: query
          name: page_no
          required: false
          schema:
            type: number
          description: The page of the channel list that you want to query. The default value is 0.</br>
                       <div class="info-msg"><i class="fa fa-warning"></i> The value of <code>page_no</code> cannot exceed (the total number of channels/the number of items in a page - 1). Otherwise, the specified page does not contain any channel list.</div>
        - in: query
          name: page_size
          required: false
          schema:
            type: number
          description: The number of items in a page. The default value is 100. `page_size` cannot exceed 500.
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channelList_response'
              example:
               success: true
               data:
                    channels: [
                      {
                      channel_name: "lkj144",
                      user_count: 3,
                      }
                    ]
                    total_size: 3
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

components:
  schemas:
     createProject:
      type: object
      required:
        - name
        - enable_sign_key
      properties:
        name:
          type: string
          description: The project name.
          maxLength: 255
          minLength: 1
        enable_sign_key:
          type: boolean
          description: >-
             Whether to enable the primary App Certificate:

              - true: Enable the primary App Certificate.
              - false: Do not enable the primary App Certificate.

              <div class="info-msg"><i class="fa fa-warning"></i> After creating a project, you can send a request to <code>https://api.agora.io/dev/v1/signkey</code> to enable or disable the primary App Certificate, or send a request to <code>https://api.agora.io/dev/v1/reset_signkey</code> to reset the primary App Certificate.</div>
          default: false
     getProject:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The project ID, which can be obtained by calling the Gets all projects API.
        name:
          type: string
          description: The project name.
     deleteProject:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The project ID, which can be obtained by calling the Gets all projects API.
     changeProjectStatus:
      type: object
      required:
        - id
        - status
      properties:
        id:
          type: string
          description: The project ID, which can be obtained by calling the Gets all projects API.
        status:
          type: number
          description: >-
                  Whether to enable or disable the project:
                  <ul>
                    <li>0：Enable the project.</li>
                    <li>1：Disable the project.</li>
                    </ul>
     setRecordingServer:
      type: object
      required:
        - id
        - recording_server
      properties:
        id:
          type: string
          description: The project ID, which can be obtained by calling the Gets all projects API.
        recording_server:
          type: string
          description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
     changeSignKey:
      type: object
      required:
        - id
        - enable
      properties:
        id:
          type: string
          description: The project ID, which can be obtained by calling the Gets all projects API.
        enable:
          type: boolean
          description: >-
                    Whether to enable or disable the primary App Certificate for the project:
                      - true：Enable the primary App Certificate.
                      - false：Do not enable the primary App Certificate.
          default: false
     resetSignKey:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: The project ID, which can be obtained by calling the Gets all projects API.
     createKickingRule:
      type: object
      required:
        - appid
        - time
        - time_in_seconds
        - privileges
      properties:
        appid:
          type: string
          description: The App ID of the project.
        cname:
          type: string
          description: The channel name. Do not set it as an empty string "".
        uid:
          type: number
          description: The user ID. You can use the SDK APIs to get it. Do not set it as `0`.
        ip:
          type: string
          description: The IP address of the user that you want to kick out of the channel. Do not set it as `0`.
        time:
          type: number
          description: The time duration (in minutes) to ban the user. The value range is [1,1440], and the default value is 60.
                        <div class="warning-msg"><i class="fa fa-warning"></i> Note:</br><ul><li>If the set value is between <code>0</code> to <code>1</code>, Agora automatically sets the value to <code>1</code>.</li><li>If the set value is higher than <code>1440</code>, Agora automatically sets the value to <code>1440</code>. </li><li>If the set value is <code>0</code>, the banning rule does not take effect. The server sets all users that conform to the rule offline, and users can log in again to re-join the channel.</li><li>Use either <code>time</code> or <code>time_in_seconds</code>. If you set both parameters, the <code>time_in_seconds</code> parameter takes effect.</li></ul></div>
        time_in_seconds:
          type: number
          description: The time duration (in seconds) to ban the user. The value range is [10,86430], and the default value is 3600.
                        <div class="warning-msg"><i class="fa fa-warning"></i> Note:</br><ul><li>If the set value is between <code>0</code> to <code>10</code>, Agora automatically sets the value to <code>10</code>.</li><li>If the set value is higher than <code>86430</code>, Agora automatically sets the value to <code>86430</code>. </li><li>If the set value is <code>0</code>, the banning rule does not take effect. The server sets all users that conform to the rule offline, and users can log in again to re-join the channel.</li><li>Use either <code>time</code> or <code>time_in_seconds</code>. If you set both parameters, the <code>time_in_seconds</code> parameter takes effect.</li></ul></div>
        privileges:
          type: array
          description: >-
                  The user privileges from which you want to ban the specified users. You can choose the following values:
                    - `join_channel`： Bans a user from joining a channel or kicks a user out of a channel.
                    - `publish_audio`：Bans a user from publishing audio. You can pass in both `publish_audio` and `publish_video` to ban a user from publishing audio and video.
                    - `publish_video`：Bans a user from publishing video. You can pass in both `publish_audio` and `publish_video` to ban a user from publishing audio and video.

          items:
            type: string
            enum:
              - join_channel
              - publish_audio
              - publish_video
     # updateKickingRule:
     #  type: object
     #  required:
     #    - appid
     #    - id
     #    - time
     #    - time_in_seconds
     #  properties:
     #    appid:
     #      type: string
     #      description: The App ID of the project.
     #    id:
     #      type: number
     #      description: The ID of the rule that you want to update.
     #    time:
     #      type: number
     #      description: The time duration (in minutes) to ban the user. The value range is [1,1440], and the default value is 60.
     #                  <div class="warning-msg"><i class="fa fa-warning"></i> Note:</br><ul><li>If the set value is between <code>0</code> to <code>1</code>, Agora automatically sets the value to <code>1</code>.</li><li>If the set value is higher than <code>1440</code>, Agora automatically sets the value to <code>1440</code>. </li><li>If the set value is <code>0</code>, the banning rule does not take effect. The server sets all users that conform to the rule offline, and users can log in again to re-join the channel.</li><li>Use either <code>time</code> or <code>time_in_seconds</code>. If you set both parameters, the <code>time_in_seconds</code> parameter takes effect.</li></ul></div>
     #    time_in_seconds:
     #      type: number
     #      description: The time duration (in seconds) to ban the user. The value range is [10,86430], and the default value is 3600.
     #                    <div class="warning-msg"><i class="fa fa-warning"></i> Note:</br><ul><li>If the set value is between <code>0</code> to <code>10</code>, Agora automatically sets the value to <code>10</code>.</li><li>If the set value is higher than <code>86430</code>, Agora automatically sets the value to <code>86430</code>. </li><li>If the set value is <code>0</code>, the banning rule does not take effect. The server sets all users that conform to the rule offline, and users can log in again to re-join the channel.</li><li>Use either <code>time</code> or <code>time_in_seconds</code>. If you set both parameters, the <code>time_in_seconds</code> parameter takes effect.</li></ul></div>
     # deleteKickingRule:
     #  type: object
     #  required:
     #    - appid
     #    - id
     #  properties:
     #    appid:
     #      type: string
     #      description: The App ID of the project.
     #    id:
     #      type: number
     #      description: The ID of the rule that you want to delete.
     createProject_response:
      type: object
      properties:
        project:
          type: object
          description: The detailed information on the project.
          properties:
            id:
              type: string
              description: The project ID.
            name:
              type: string
              description: The project name.
            vendor_key:
              type: string
              description: The App ID of the project.
            sign_key:
              type: string
              description: The primary App Certificate of the project.
            recording_server:
              type: string
              description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
            status:
              type: number
              description: >-
                The status of the project:
                  - 1: The project is enabled.
                  - 0：The project is disabled.
            created:
              type: number
              description: The Unix timestamp (in seconds) of when the project is created.
     getProject_response:
      type: object
      properties:
        project:
          type: object
          description: The detailed information on the project.
          properties:
              id:
                type: string
                description: The project ID。
              name:
                type: string
                description: The project name.
              vendor_key:
                type: string
                description: The App ID of the project.
              sign_key:
                type: string
                description: The primary App Certificate of the project.
              recording_server:
                type: string
                description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
              status:
                type: number
                description: >-
                  The status of the project:
                    - 1: The project is enabled.
                    - 0：The project is disabled.
              created:
                type: number
                description: The Unix timestamp (in seconds) of when the project is created.
     deleteProject_response:
      type: object
      properties:
        success:
          type: boolean
          description: >-
             Whether the project is deleted:
               - true：The project is deleted successfully.
               - false：Reserved for future use.

     getProjects_response:
      type: object
      properties:
        Projects:
         type: array
         description: Information of all your Agora projects. Each array element represents one project.
         items:
          properties:
            id:
              type: string
              description: The project ID.
            name:
              type: string
              description: The project name.
            vendor_key:
              type: string
              description: The App ID of the project.
            sign_key:
              type: string
              description: The primary App Certificate of the project.
            recording_server:
              type: string
              description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.

            status:
              type: number
              description: >-
                  The status of the project:
                    - 1: The project is enabled.
                    - 0：The project is disabled.
            created:
              type: number
              description: The Unix timestamp (in seconds) of when the project is created.
     changeProjectstatus_response:
      type: object
      properties:
        project:
          type: object
          description: The detailed information on the project.
          properties:
              id:
                type: string
                description: The project ID.
              name:
                type: string
                description: The project name.
              vendor_key:
                type: string
                description: The App ID of the project.
              sign_key:
                type: string
                description: The primary App Certificate of the project.
              recording_server:
                type: string
                description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
              status:
                type: number
                description: >-
                       The status of the project:
                          - 1: The project is enabled.
                          - 0：The project is disabled.
              created:
                type: number
                description: The Unix timestamp (in seconds) of when the project is created.
     setRecordingServer_response:
      type: object
      properties:
        project:
          type: object
          description: The detailed information on the project.
          properties:
              id:
                type: string
                description: The project ID.
              name:
                type: string
                description: The project name.
              vendor_key:
                type: string
                description: The App ID of the project.
              sign_key:
                type: string
                description: The primary App Certificate of the project.
              recording_server:
                type: string
                description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
              status:
                type: number
                description: >-
                       The status of the project:
                          - 1: The project is enabled.
                          - 0: The project is disabled.
              created:
                type: number
                description: The Unix timestamp (in seconds) of when the project is created.
     changeSignKey_response:
      type: object
      properties:
        project:
          type: object
          description: The detailed information on the project.
          properties:
              id:
                type: string
                description: The project ID.
              name:
                type: string
                description: The project name.
              vendor_key:
                type: string
                description: The App ID of the project.
              sign_key:
                type: string
                description: The primary App Certificate of the project.
              recording_server:
                type: string
                description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
              status:
                type: number
                description: >-
                      The status of the project:
                        - 1: The project is enabled.
                        - 0: The project is disabled.
              created:
                type: number
                description: The Unix timestamp (in seconds) of when the project is created.
     resetSignKey_response:
      type: object
      properties:
        project:
          type: object
          description: The detailed information on the project.
          properties:
                id:
                  type: string
                  description: The project ID.
                name:
                  type: string
                  description: The project name.
                vendor_key:
                  type: string
                  description: The App ID of the project.
                sign_key:
                  type: string
                  description: The primary App Certificate of the project.
                recording_server:
                  type: string
                  description: The IP of the recording server. Pay attention to this field if you use the Agora On-premise Recording SDK earlier than v1.9.0.
                status:
                  type: number
                  description: >-
                         The status of the project:
                            - 1: The project is enabled.
                            - 0: The project is disabled.
                created:
                  type: number
                  description: The Unix timestamp (in seconds) of when the project is created.
     getProjectUsagesV3_response:
      type: object
      properties:
        meta:
          type: object
          description: Metadata, which describes the meaning of `durationAudioAll`, `durationVideoHd`, and `durationVideoHdp` in `usage`.
          properties:
           "durationAudioAll":
              type: object
              description: Total audio duration.
              properties:
                  "cn":
                    type: string
                    description: The meaning of `durationAudioAll` in Chinese，that is, "总音频时长".
                  "en":
                    type: string
                    description: The meaning of `durationAudioAll` in English, that is, "Total Audio Duration".
                  "unit":
                    type: string
                    description: The unit of audio duration, that is, second.
           "durationVideoHd":
              type: object
              description: The total duration of HD video.
              properties:
                  "cn":
                    type: string
                    description: The meaning of `durationVideoHd` in Chinese，that is, "高清视频时长（含本地服务端录制）".
                  "en":
                    type: string
                    description: The meaning of `durationVideoHd` in English，that is, "HD Video Duration (including On-premise Recording)".
                  "unit":
                    type: string
                    description: The unit of HD video duration, that is, second.
           "durationVideoHdp":
              type: object
              description: The total duration of HDP video.
              properties:
                  "cn":
                    type: string
                    description: The meaning of `durationVideoHdp` in Chinese，that is, "超高清视频时长（含本地服务端录制）".
                  "en":
                    type: string
                    description: The meaning of `durationVideoHdp` in English，that is, "HDP Video Duration (including On-premise Recording).
                  "unit":
                    type: string
                    description: The unit of HDP video duration, that is, second.
        usages:
          type: array
          description: Usage of the specified project.
          items:
            properties:
              date:
                type: number
                description: The query date, using UTC time and Unix timestamp.
              usage:
                type: object
                description: Usage of the query date.
                properties:
                    "durationAudioAll":
                        type: number
                        description: Total audio duration in seconds.
                    "durationVideoHd":
                        type: number
                        description: HD video duration in seconds.
                    "durationVideoHdp":
                        type: number
                        description: HDP video duration in seconds.
     createKickingRule_response:
      type: object
      properties:
        status:
          type: string
          description: The status of this request. `"success"` means the request is successful.
        id:
          type: number
          description: The rule ID.
     listKickingRule_response:
      type: object
      properties:
        status:
          type: string
          description: The status of this request. `"success"` means the request is successful.
        rules:
          type: array
          description: >-
              The list of the banning rules, which contains the following fields:
          items:
            properties:
              id:
                type: number
                description: The rule ID.
              appid:
                type: string
                description:  The App ID of the project.
              uid:
                type: number
                description: The user ID.
              opid:
                type: number
                description: The operation ID, which can be used to track operation records when troubleshooting.
              cname:
                type: string
                description: The channel name.
              ip:
                type: string
                description: The IP address of the user.
              ts:
                type: string
                description: The UTC time when this rule expires.
              privileges:
                type: array
                description: >-
                  Banned user privileges, including the following values:
                    - `join_channel`: Bans a user from joining a channel or kicks a user out of a channel.
                    - `publish_audio`: Bans a user from publishing audio.
                    - `publish_video`: Bans a user from publishing video.
              createAt:
                type: string
                description: The UTC time when this rule is created.
              updateAt:
                type: string
                description: The UTC time when this rule is updated.
     # updateKickingRule_response:
     #  type: object
     #  properties:
     #    status:
     #      type: string
     #      description: The status of this request. `"success"` means the request is successful.
     #    result:
     #      type: object
     #      description: The result of the rule update.
     #      properties:
     #       id:
     #        type: string
     #        description: The rule ID.
     #       ts:
     #          type: string
     #          description: The time when the rule expires, using UTC time and Unix timestamp.
     # deleteKickingRule_response:
     #  type: object
     #  properties:
     #    status:
     #      type: string
     #      description: The status of this request. `"success"` means the request is successful.
     #    id:
     #      type: string
     #      description: The ID of the rule that you want to delete.
     userProperty_response:
      type: object
      properties:
        success:
          type: boolean
          description:  >-
                      The state of this request:
                        - true: Success.
                        - false: Reserved for future use.
        data:
          type: object
          description: User statistics.
          properties:
            join:
              type: number
              description: The Unix timestamp in seconds of when the user joins the channel. The response contains this field only if `in_channel` is `true`.
            in_channel:
              type: boolean
              description: >-
                         Whether the user is in the channel:
                          - true：The user is in the channel.
                          - false: The user is not in the channel.
            role:
              type: number
              description: >-
                        The role of the user in the channel. The response contains this field only if `in_channel` is `true`.
                          - 0: Unknown user role.
                          - 1: User, in a Communication channel.
                          - 2: Host, in a Live-broadcast channel.
                          - 3: Audience, in a Live-broadcast channel.
     userList_response:
      type: object
      properties:
        success:
          type: boolean
          description:  >-
                       The state of this request:
                        - true: Success.
                        - false: Reserved for future use.
        data:
          type: object
          description: >-
            User information.
          properties:
            channel_exist:
              type: boolean
              description:  >-
                          Whether the specified channel exists.
                            - true: The channel exists.
                            - false: The channel does not exist.
            mode:
              type: number
              description: >-
                         The channel profile:
                          - 1：The Communication profile.
                          - 2: The Live-broadcast profile.

                           The response contains this field only if `channel_exist` is `true`.
            total:
              type: number
              description: The total number of users in the channel. The response returns this field only when `mode` is `1`, that is, the Communication profile.
            users:
              type: array
              description: The ID list of all users in the channel. The response returns this field only when `mode` is `1`, that is, the Communication profile.
              items:
               type: string
            broadcasters:
              type: array
              description: The ID list of all the hosts in the channel. The response returns this field only when `mode` is `2`, that is, the Live-broadcast profile.
              items:
               type: string
            audience:
              type: array
              description: The ID list of the first 10,000 audience in the channel. The response returns this field only when `mode` is `2`, that is, the Live-broadcast profile.
              items:
               type: string
            audience_total:
              type: number
              description: The total number of the audience in the channel. The response returns this field only when `mode` is `2`, that is, the Live-broadcast profile.
     channelList_response:
      type: object
      properties:
        success:
          type: boolean
          description:  >-
                       The state of this request:
                        - true: Success.
                        - false: Reserved for future use.
        data:
          type: object
          description: >-
                   The response data, which includes the following fields:
          properties:
            channels:
              type: array
              description: >-
                       The channel lists.
                       <div class="info-msg"><i class="fa fa-warning"></i> If the specified page does not contain any channels, this field is empty.</div>

              items:
               properties:
                 channel_name:
                  type: string
                  description: The channel name.
                 user_count:
                  type: number
                  description: The number of users in the channel.
            total_size:
              type: number
              description: The number of channels under the specified App ID.

  requestBodies:
    createProject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createProject'
          example:
            name: "projectx"
            enable_sign_key: true
      description: The following parameters are required in the request body.
      required: true
    getProject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/getProject'
          example:
            id: "xxxxx"
            name: "xxxxx"
      description: The following parameters are required in the request body.
      required: true
    deleteProject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/deleteProject'
          example:
            id: "xxxx"
      description: The following parameters are required in the request body.
      required: true
    changeProjectStatus:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/changeProjectStatus'
          example:
            id: "xxxx"
            status: 0
      description: The following parameters are required in the request body.
      required: true
    setRecordingServer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/setRecordingServer'
          example:
            id: "xxxx"
            recording_server: "10.12.1.5:8080"
      description: The following parameters are required in the request body.
      required: true
    changeSignKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/changeSignKey'
          example:
            id: "xxxx"
            enable: true
      description: The following parameters are required in the request body.
      required: true
    resetSignKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/resetSignKey'
          example:
            id: "xxxx"
      description: The following parameters are required in the request body.
      required: true
    createKickingRule:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createKickingRule'
          example:
            appid: "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2"
            cname: "channel1"
            uid: 589517928
            ip: ""
            time: 60
            privileges: ["join_channel"]
      description: The following parameters are required in the request body.
      required: true
    # updateKickingRule:
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/updateKickingRule'
    #       example:
    #         appid: "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2"
    #         id: 1953
    #         time: 60
    #   description: The following parameters are required in the request body.
    #   required: true
    # deleteKickingRule:
    #   content:
    #     application/json:
    #       schema:
    #         $ref: '#/components/schemas/deleteKickingRule'
    #       example:
    #         appid: "4855xxxxxxxxxxxxxxxxxxxxxxxxeae2"
    #         id: 1953
    #   description: The following parameters are required in the request body.
    #   required: true

  responses:
    200:
      description: The request is successful.
    400:
      description: Bad request.
    401:
      description: Unauthorized (incorrect App ID/Customer Certificate).
    403:
      description: Forbidden.
    404:
      description: The requested resource could not be found.
    415:
      description: Unsupported media type. Make sure that you set `Content-Type`in `Headers` as `application/json`.
    429:
      description: Too many requests.
    500:
      description: Internal error of the Agora RESTful API service.
  securitySchemes:
    agora_auth:
      type: http
      scheme: basic
