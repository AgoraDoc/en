openapi: 3.0.0
info:
  description: >
    This article contains detailed help for the Cloud Recording RESTful APIs, and provides the **Try it out** feature which allows you to send RESTful API requests and receive responses directly on the web page.
    
    ## Authentication

    The RESTful APIs only support HTTPS. Before sending HTTP requests, you must pass the basic Agora HTTP authentication (the `Authorization` parameter in the HTTP request head) with `api_key:api_secret`:
    
      - `api_key`: Customer ID
      - `api_secret`: Customer Certificate

    You can find your Customer ID and Customer Certificate on the [RESTful API](https://dashboard.agora.io/restful) page in Console. See [RESTful API authentication](https://docs.agora.io/en/faq/restful_authentication) for how to generate `Authorization`. You can also generate `Authorization` by using the **Try it out** feature of this page.


    ## Data format

    All requests are sent to the host: `api.agora.io`. All the request URLs and request bodies are case sensitive. Both the request and response contents are in JSON format.
    
    ## Call sequence
    
    Use the RESTful APIs in the following steps:
    
      1. Call the `acquire` method to request a resource ID for   cloud recording.
      2. Call the  `start` method within five minutes after getting   the resource ID to start the recording.
      3. Call the `stop` method to stop the recording.
    
    During the recording, you can call the `query` method to check the recording status. See [Sample code](https://docs.agora.io/en/cloud-recording/cloud_recording_rest#demo-rest) for an example of using the RESTful APIs.


    ## <a name="status"></a>Common Errors

    [Errors](https://docs.agora.io/en/cloud-recording/common_errors) lists the common errors in using the Cloud Recording RESTful APIs.

    ## <a name="tryapi"></a>Try out the API

    You can use **Try it out** to send RESTful API requests and receive responses directly on the web page. You need to get authorized before sending any request. Click **Authorize** below, enter your Customer ID in **Username** and Customer Certificate in **Password**, and then click **Authorize**.

    <img style="display:block;" src="https://web-cdn.agora.io/docs-files/1585619936606" alt="Authorize" width="50%">

    <div class="info-msg">Note：Any Agora service incurred by the request is included in your monthly service usage.</div>


      
  version: 2019.12.16
  title: Cloud Recording RESTful API
servers: 
  - url: https://api.agora.io
tags: 
- name: "Cloud Recording"
security:
  - agora_auth: []
paths:
  /v1/apps/{appid}/cloud_recording/acquire:
    post:
      tags:
      - "Cloud Recording"
      summary: Gets the recording resource
      operationId: acquire
      
      description: Before starting a cloud recording, you need to call this method to get a resource ID.
    
    
        If this method call succeeds, you get a resource ID (`resourceId`) from the HTTP response body. The resource ID is valid for five minutes, so you need to start recording with this resource ID within five minutes.

        <div class="info-msg"><i class="fa fa-info-circle"></i> Note：<ul><li>One resource ID can only be used for one recording session.</li><li>The request frequency limit is 10 requests per second per APP ID. Contact support@agora.io if you want to raise the limit.</li></ul></div>   
      
      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID used in the channel to be recorded. For more information, see [APP ID](https://docs.agora.io/en/Agora%20Platform/terms?platform=All%20Platforms#a-nameappidaapp-id).
      requestBody:
        $ref: '#/components/requestBodies/acquire'
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/acquire_response'
              example:
                resourceId: JyvK8nXHuV1BE64GDkAaBGEscvtHW7v8BrQoRPCHxmeVxwY22-x-kv4GdPcjZeMzoCBUCOr9q-k6wBWMC7SaAkZ_4nO3JLqYwM1bL1n6wKnnD9EC9waxJboci9KUz2WZ4YJrmcJmA7xWkzs_L3AnNwdtcI1kr_u1cWFmi9BWAWAlNd7S7gfoGuH0tGi6CNaOomvr7-ILjPXdCYwgty1hwT6tbAuaW1eqR0kOYTO0Z1SobpBxu1czSFh1GbzGvTZG 
        '201':
          $ref: '#/components/responses/201' 
        '400':
          $ref: '#/components/responses/400' 
        '401':
          $ref: '#/components/responses/401' 
        '500':
          $ref: '#/components/responses/500' 
        '504':
          $ref: '#/components/responses/504' 
  /v1/apps/{appid}/cloud_recording/resourceid/{resourceid}/mode/{mode}/start:
    post:
      tags:
      - "Cloud Recording"
      summary: Starts cloud recording
      operationId: start
      description: After getting a resource ID, call this method to start cloud recording.
      
        <div class="info-msg"><i class="fa fa-info-circle"> The request frequency limit is 10 requests per second per APP ID.</i></div>  
        
      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID used in the channel to be recorded.
        - in: path
          name: resourceid
          required: true
          schema:
            type: string
          description: The resource ID requested by the `acquire` method.
        - in: path
          name: mode
          required: true
          schema:
            type: string
          description: >-
               The recording mode. Supports individual mode (`individual`) and composite mode (`mix`). Composite mode is the default mode. In individual mode, Agora Cloud Recording records the audio and video as separate files for each UID in a channel. In composite mode, Agora Cloud Recording generates a single mixed audio and video file for all UIDs in a channel.
      requestBody:
        $ref: '#/components/requestBodies/start'
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/start_response'
              example:
                sid: 38f8e3cfdc474cd56fc1ceba380d7e1a
                resourceId: >-
                  JyvK8nXHuV1BE64GDkAaBGEscvtHW7v8BrQoRPCHxmeVxwY22-x-kv4GdPcjZeMzoCBUCOr9q-k6wBWMC7SaAkZ_4nO3JLqYwM1bL1n6wKnnD9EC9waxJboci9KUz2WZ4YJrmcJmA7xWkzs_L3AnNwdtcI1kr_u1cWFmi9BWAWAlNd7S7gfoGuH0tGi6CNaOomvr7-ILjPXdCYwgty1hwT6tbAuaW1eqR0kOYTO0Z1SobpBxu1czSFh1GbzGvTZG
        '201':
          $ref: '#/components/responses/201' 
        '400':
          $ref: '#/components/responses/400' 
        '401':
          $ref: '#/components/responses/401' 
        '500':
          $ref: '#/components/responses/500' 
        '504':
          $ref: '#/components/responses/504' 
  /v1/apps/{appid}/cloud_recording/resourceid/{resourceid}/sid/{sid}/mode/{mode}/updateLayout:
    post:
      tags:
      - "Cloud Recording"
      summary: Updates the video mixing layout
      operationId: updateLayout
      description: During a recording, you can call this method to update the video mixing layout multiple times.


        This method call overrides the existing layout configurations. For example, if you set the `backgroundColor` parameter as `"#FF0000"` (red) when starting a recording and call this method to update the layout without setting the `backgroundColor` parameter, the background color changes back to black (the default value).
        
        <div class="info-msg"><i class="fa fa-info-circle"> The request frequency limit is 10 requests per second per APP ID.</i></div> 

      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID used in the channel to be recorded.
        - in: path
          name: resourceid
          required: true
          schema:
            type: string
          description: The resource ID requested by the `acquire` method.
        - in: path
          name: sid
          required: true
          schema:
            type: string
          description: The recording ID created by the `start` method. 
        - in: path
          name: mode
          required: true
          schema:
            type: string
          description: The recording mode. Supports individual mode (`individual`) and composite mode (`mix`). 
      requestBody:
        $ref: '#/components/requestBodies/updateLayout'       
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateLayout_response'
              example:
                sid: 38f8e3cfdc474cd56fc1ceba380d7e1a
                resourceId: >-
                  JyvK8nXHuV1BE64GDkAaBGEscvtHW7v8BrQoRPCHxmeVxwY22-x-kv4GdPcjZeMzoCBUCOr9q-k6wBWMC7SaAkZ_4nO3JLqYwM1bL1n6wKnnD9EC9waxJboci9KUz2WZ4YJrmcJmA7xWkzs_L3AnNwdtcI1kr_u1cWFmi9BWAWAlNd7S7gfoGuH0tGi6CNaOomvr7-ILjPXdCYwgty1hwT6tbAuaW1eqR0kOYTO0Z1SobpBxu1czSFh1GbzGvTZG
        '400':
          $ref: '#/components/responses/400' 
        '401':
          $ref: '#/components/responses/401' 
        '404':
          $ref: '#/components/responses/404' 
        '500':
          $ref: '#/components/responses/500' 
        '504':
          $ref: '#/components/responses/504' 
  /v1/apps/{appid}/cloud_recording/resourceid/{resourceid}/sid/{sid}/mode/{mode}/query:
    get:
      tags:
      - "Cloud Recording"
      summary: Queries the recording status
      operationId: query
      description: After you start a recording, you can call query to check its status.


        `query` works only with an ongoing recording session. If you call `query` after a recording ends or after it starts with error, you get a 404 (Not Found) error. We recommend that you use the callback service for getting the details of all cloud recording events. See [Agora Cloud Recording RESTful API Callback Service](https://docs.agora.io/en/cloud-recording/cloud_recording_callback_rest) for more information.

        <div class="info-msg"><i class="fa fa-info-circle"> The request frequency limit is 10 requests per second per APP ID.</i></div> 
      requestBody:
        $ref: '#/components/requestBodies/query'
      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID used in the channel to be recorded.
        - in: path
          name: resourceid
          required: true
          schema:
            type: string
          description: The resource ID requested by the `acquire` method.
        - in: path
          name: sid
          required: true
          schema:
            type: string
          description: The recording ID created by the `start` method. 
        - in: path
          name: mode
          required: true
          schema:
            type: string
          description: The recording mode. Supports individual mode (`individual`) and composite mode (`mix`). 
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/query_response'
              example:
                resourceId: "JyvK8nXHuV1BE64GDkAaBGEscvtHW7v8BrQoRPCHxmeVxwY22-x-kv4GdPcjZeMzoCBUCOr9q-k6wBWMC7SaAkZ_4nO3JLqYwM1bL1n6wKnnD9EC9waxJboci9KUz2WZ4YJrmcJmA7xWkzs_L3AnNwdtcI1kr_u1cWFmi9BWAWAlNd7S7gfoGuH0tGi6CNaOomvr7-ILjPXdCYwgty1hwT6tbAuaW1eqR0kOYTO0Z1SobpBxu1czSFh1GbzGvTZG"
                sid: "38f8e3cfdc474cd56fc1ceba380d7e1a"
                serverResponse:
                  fileListMode: "json"
                  fileList: [
                    {
                      filename: "xxx.m3u8",
                      trackType: "audio_and_video",
                      uid: "123",
                      mixedAllUser: "true",
                      isPlayable: "true",
                      sliceStartTime: "1562724971626"
                    },  
                    {
                      filename: "xxx.m3u8",
                      trackType: "audio_and_video",
                      uid: "456",
                      mixedAllUser: "true",
                      isPlayable: "true",
                      sliceStartTime: "1562724971626"
                   }
                   ]
                  status: "5"
                  sliceStartTime: "1562724971626"
        '206':
          $ref: '#/components/responses/206' 
        '400':
          $ref: '#/components/responses/400' 
        '401':
          $ref: '#/components/responses/401' 
        '404':
          $ref: '#/components/responses/404' 
        '500':
          $ref: '#/components/responses/500' 
        '504':
          $ref: '#/components/responses/504' 
  /v1/apps/{appid}/cloud_recording/resourceid/{resourceid}/sid/{sid}/mode/{mode}/stop:
    post:
      tags:
      - "Cloud Recording"
      summary: Stops cloud recording
      operationId: stop
      description: When a recording finishes, call this method to leave the channel and stop recording. To use Agora Cloud Recording again, you need to call the  `acquire` method for a new resource ID.
          

       <div class="info-msg"><i class="fa fa-info-circle"></i> Note：<ul><li>Agora Cloud Recording automatically leaves the channel and stops recording when no user is in the channel for more than 30 seconds by default.</li><li>The request frequency limit is 10 requests per second per APP ID.</li></ul></div>

      parameters:
        - in: path
          name: appid
          required: true
          schema:
            type: string
          description: The App ID used in the channel to be recorded.
        - in: path
          name: resourceid
          required: true
          schema:
            type: string
          description: The resource ID requested by the `acquire` method.
        - in: path
          name: sid
          required: true
          schema:
            type: string
          description: The recording ID created by the `start` method. 
        - in: path
          name: mode
          required: true
          schema:
            type: string
          description: The recording mode. Supports individual mode (`individual`) and composite mode (`mix`). 
      requestBody:
        $ref: '#/components/requestBodies/stop'
      responses:
        '200':
          description: The request is successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stop_response'
              example:
                resourceId: "JyvK8nXHuV1BE64GDkAaBGEscvtHW7v8BrQoRPCHxmeVxwY22-x-kv4GdPcjZeMzoCBUCOr9q-k6wBWMC7SaAkZ_4nO3JLqYwM1bL1n6wKnnD9EC9waxJboci9KUz2WZ4YJrmcJmA7xWkzs_L3AnNwdtcI1kr_u1cWFmi9BWAWAlNd7S7gfoGuH0tGi6CNaOomvr7-ILjPXdCYwgty1hwT6tbAuaW1eqR0kOYTO0Z1SobpBxu1czSFh1GbzGvTZG"
                sid: "38f8e3cfdc474cd56fc1ceba380d7e1a"
                serverResponse:
                  fileListMode: "json"
                  fileList: [
                    {
                      filename: "xxx.m3u8",
                      trackType: "audio_and_video",
                      uid: "123",
                      mixedAllUser: "true",
                      isPlayable: "true",
                      sliceStartTime: "1562724971626"
                    },  
                    {
                      filename: "xxx.m3u8",
                      trackType: "audio_and_video",
                      uid: "456",
                      mixedAllUser: "true",
                      isPlayable: "true",
                      sliceStartTime: "1562724971626"
                   }
                   ]
                  uploadingStatus: "uploaded"
        '206':
          $ref: '#/components/responses/206' 
        '400':
          $ref: '#/components/responses/400' 
        '401':
          $ref: '#/components/responses/401' 
        '404':
          $ref: '#/components/responses/404' 
        '500':
          $ref: '#/components/responses/500' 
        '504':
          $ref: '#/components/responses/504' 
components:
  schemas:
    acquire:
      type: object
      required:
        - cname
        - uid
        - clientRequest
      properties:
        cname:
          type: string
          description: The name of the channel to be recorded. 
        uid:
          type: string
          description: >-
            A string that contains the UID of the recording   client, for example `"527841"`. The UID needs to meet   the following requirements: 
              
              - It is a 32-bit unsigned integer within the range between 1 and (2<sup>32</sup>-1).
              - *It is unique and does not clash with any existing UID in the channel.*
              - It should not be a string. Ensure that all UIDs in the channel are integers.

        clientRequest:
          type: object
          description: A client request.
          properties:
            resourceExpiredHour:
              type: integer
              default: 72
              description: The time limit (in hours) for the Cloud Recording RESTful API calls. It must be between `1` and `720`. The time limit starts from when you successfully start a cloud recording and get `sid`(the recording ID ). When you exceed the time limit, you can no longer call `query`, `updateLayout`, and `stop`.
    start:
      type: object
      required:
        - cname
        - uid
        - clientRequest
      properties:
        cname:
          type: string
          description: The name of the channel to be recorded. 
        uid:
          type: string
          description: A string that contains the UID of the recording client. Must be the same `uid` used in the `acquire` method.
        clientRequest:
          type: object
          required:
            - storageConfig
            - recordingConfig
          description: A client request。
          properties:
            token:
              type: string
              description: The [dynamic key](https://docs.agora.io/en/Agora%20Platform/terms?platform=All%20Platforms#a-namekeyadynamic-key) used in the channel to be recorded. Ensure that you set this parameter if the recording channel uses a token.
            recordingConfig:
              type: object
              description: The recording configuration.
              required:
                - channelType
                - subscribeUidGroup
              properties:
                channelType:
                   type: integer
                   description: >-
                     The channel profile. Agora Cloud Recording must use the same channel profile as the Agora Native/Web SDK. Otherwise, issues may occur.
                     
                     - 0: Communication profile. 
                     
                     - 1: Live broadcast profile.
                     
                   default: 0
                streamTypes:
                  type: integer
                  description: >-
                    The type of the recorded media stream.
                  
                    - 0: Records audio only.
                    
                    - 1: Records video only.
                    
                    - 2: Records audio and video.
                    
                  default: 2
                decryptionMode:
                  type: integer
                  description: |-
                    The decryption mode that is the same as the encryption mode set by the Agora Native/Web SDK. When the channel is encrypted, Agora Cloud Recording uses `decryptionMode` to enable the built-in decryption function. 

                    - 0: None.
                    - 1: AES-128, XTS mode.
                    - 2: AES-128, ECB mode.
                    - 3: AES-256, XTS mode.
                  default: 0
                secret:
                  type: string
                  description: The decryption password when decryption mode is enabled.              
                audioProfile:
                  type: integer
                  description: >-
                    The sample rate, bitrate, encoding mode, and the number of channels. You cannot set this parameter in individual recording mode.
                    
                    - 0: Sample rate of 48 kHz, music encoding, mono, and a bitrate of up to 48 Kbps.
                    
                    - 1: Sample rate of 48 kHz, music encoding, mono, and a bitrate of up to 128 Kbps.
                    
                    - 2: Sample rate of 48 kHz, music encoding, stereo, and a bitrate of up to 192 Kbps.
                     
                  default: 0
                videoStreamType:
                  type: integer
                  description: >-
                    The type of the video stream. 
                  
                    - 0: Records the high-stream video.
                    
                    - 1: Records the low-stream video.
                    
                  default: 0
                maxIdleTime:
                  type: integer
                  default: 30
                  description: >-
                    Agora Cloud Recording automatically stops recording and leaves the channel when there is no user in the recording channel after a time period (30 seconds by default) set by this parameter. The value range is from 5 to 2<sup>32</sup>-1. 
                  
                    <div class="info-msg"><i class="fa fa-info-circle"></i> Note: <ul><li>The recording service does not recognize a channel as an idle channel, so long as the channel has users, regardless of whether they send stream or not.</li><li>If a live-broadcast channel has an audience without a host for a set time (<code>maxIdleTime</code>), the recording service automatically stops and leaves the channel.</li></div>
                transcodingConfig:
                  type: object
                  description: >-
                    The transcoding configuration. You cannot set this parameter in individual recording mode. If you set this parameter, ensure that you set `width`, `height`, `fps`, and `bitrate`. Refer to [How do I set the video profile of the recorded video?](https://docs.agora.io/en/faq/recording_video_profile) for detailed information about setting `transcodingConfig`.
                  required:
                    - width
                    - height
                    - fps
                    - bitrate
                  properties:
                    width:
                      type: integer
                      default: 360
                      description: The width of the mixed video (pixels).  `width` should not exceed 1080, and `width`*`height`  should not exceed 1920 * 1080, otherwise, an error occurs.
                    height:
                      type: integer
                      default: 640
                      description: The height of the mixed video (pixels). `height` should not exceed 1080, and `width`*`height`  should not exceed 1920 * 1080, otherwise, an error occurs.
                    fps:
                      type: integer
                      default: 15
                      description: The video frame rate (fps). 
                    bitrate:
                      type: integer
                      default: 500
                      description: The video bitrate (Kbps). 
                    maxResolutionUid:
                      type: string
                      description: When `mixedVideoLayout` is set as `2` (vertical layout), you can specify the UID of the large video window by this parameter.
                    mixedVideoLayout:
                      type: integer
                      description: >-
                        The video mixing layout. 0, 1, and 2 are the [predefined layouts](https://docs.agora.io/en/cloud-recording/cloud_recording_layout). If you set this parameter as `3`, you need to set the layout by the `layoutConfig` parameter.


                          - 0: Floating layout. The first user in the channel occupies the full canvas. The other users occupy the small regions on top of the canvas, starting from the bottom left corner. The small regions are arranged in the order of the users joining the channel. This layout supports one full-size region and up to four rows of small regions on top with four regions per row, comprising 17 users. 


                          - 1: Best fit layout. This is a grid layout. The number of columns and rows and the grid size vary depending on the number of users in the channel. This layout supports up to 17 users.


                          - 2: Vertical layout. One large region is displayed on the left edge of the canvas, and several smaller regions are displayed along the right edge of the canvas. The space on the right supports up to 2 columns of small regions with 8 regions per column. This layout supports up to 17 users.


                          - 3: Customized layout. Set the layoutConfig parameter to customize the layout.
                      default: 0
                    backgroundColor:                   
                      type: string
                      default: "#000000"
                      description: The background color of the canvas (the display window or screen) in RGB hex value. The string starts with a "#". The default value is `"#000000"`, the black color.
                    layoutConfig:
                      type: array
                      description: An array of the configuration of each user's region. Supports 17 users at most. Each user's region configuration is a JSON object with the following parameters.
                      required:
                        - x_axis
                        - y_axis
                        - width
                        - height
                      items:
                        type: object
                        properties:
                          uid:
                            type: string
                            description: >-
                              The string contains the UID of the user displaying the video in the region. If this parameter is not specified, the configurations apply in the order of the users joining the channel.
                          x_axis:
                            type: number
                            format: float
                            description: >-
                              The relative horizontal position of the top-left corner of the region. The value is between 0.0 (leftmost) and 1.0 (rightmost). 
                          y_axis:
                            type: number
                            format: float
                            description: >-
                               The relative vertical position of the top-left corner of the region. The value is between 0.0 (top) and 1.0 (bottom).                           
                          width:
                            type: number
                            format: float
                            description: The relative width of the region. The value is between 0.0 and 1.0.
                          height:
                            type: number
                            format: float
                            description: The relative height of the region. The value is between 0.0 and 1.0.
                          alpha:
                            type: number
                            default: 1.0
                            format: float
                            description: >-
                              The transparency of the image. The value is between 0.0 (transparent) and 1.0 (opaque). 
                          render_mode:
                            type: integer
                            description: >-
                              The video display mode:

                              - 0: Cropped mode. Uniformly scales the video until it fills the visible boundaries (cropped). One dimension of the video may have clipped contents.


                              - 1: Fit mode. Uniformly scales the video until one of its dimension fits the boundary (zoomed to fit). Areas that are not filled due to the disparity in the aspect ratio will be filled with black.
                            default: 0
                subscribeVideoUids: 
                      type: array
                      description:  An array of the user IDs (UIDs) of the users whose video you want to record, such as `["123","456"]`. The length of the array should not exceed 32. Once you set the parameter, do not set `streamTypes` in `recordingConfig` as `0`.  

                        <div class="warning-msg"><i class="fa   fa-warning"></i> Once you set subscribeVideoUids or subscribeAudioUids, Agora Cloud Recording records the audio or video of the specified users only. For example, if subscribeVideoUids is set and subscribeAudioUids is not set or is an empty array, Agora Cloud Recording records only the video (no audio) of the specified users. If both parameters are empty or if neither is set, all the users' audio and video will be recorded.</div>                        
                      items:
                        type: string
                      maxLength: 32
                      example: ["123","456"]
                subscribeAudioUids:
                      type: array
                      description: >-
                        An array of the user IDs (UIDs) of the users whose audio you want to record, such as `["123","456"]`. The length of the array should not exceed 32. Once you set the parameter, do not set `streamTypes` in `recordingConfig` as `1`.  
                      
                        <div class="warning-msg"><i class="fa   fa-warning"></i> Once you set subscribeVideoUids or subscribeAudioUids, Agora Cloud Recording records the audio or video of the specified users only. For example, if subscribeVideoUids is set and subscribeAudioUids is not set or is an empty array, Agora Cloud Recording records only the video (no audio) of the specified users. If both parameters are empty or if neither is set, all the users' audio and video will be recorded.</div>                
                      items:
                        type: string
                      maxLength: 32
                      example: ["123","456"]                     
                subscribeUidGroup:
                      type: integer
                      description: >-
                        The estimated maximum number of subscribed users. You must set this parameter in individual mode. For example, if `subscribeVideoUids` is `["100","101","102"]` and `subscribeAudioUids` is `["101","102","103"]`, the number of subscribed users is 4.
                      
                        - 0: 1 to 2 UIDs 

                        - 1: 3 to 7 UIDs

                        - 2: 8 to 12 UIDs  

                        - 3: 13 to 17 UIDs                   
            storageConfig:
              type: object
              description: Cloud storage configuration.
              required:
                - vendor
                - region
                - bucket
                - accessKey
                - secretKey
              properties:
                vendor:
                  type: integer
                  description: >-
                    The third-party cloud storage vendor.
                  
                      - `0`: [Qiniu Cloud](https://www.qiniu.com/en/products/kodo)
                      - `1`: [Amazon S3](https://aws.amazon.com/s3/?nc1=h_ls)
                      - `2`: [Alibaba Cloud](https://www.alibabacloud.com/product/oss)
                      - `3`: [Tencent Cloud](https://intl.cloud.tencent.com/product/cos)
                region:
                  type: integer
                  description: >-
                    The regional information specified by the third-party cloud storage:
                    

                    When the third-party cloud storage is [Qiniu Cloud](https://www.qiniu.com/en/products/kodo) (`vendor` = 0):
                    
                      - 0: East China
                      - 1: North China 
                      - 2: South China
                      - 3: North America  
                    
                      When the third-party cloud storage is [Amazon S3](https://aws.amazon.com/s3/?nc1=h_ls) (`vendor` = 1):
                    
                      - 0: US_EAST_1 
                      - 1: US_EAST_2 
                      - 2: US_WEST_1 
                      - 3: US_WEST_2 
                      - 4: EU_WEST_1 
                      - 5: EU_WEST_2 
                      - 6: EU_WEST_3 
                      - 7: EU_CENTRAL_1 
                      - 8: AP_SOUTHEAST_1 
                      - 9: AP_SOUTHEAST_2 
                      - 10: AP_NORTHEAST_1 
                      - 11: AP_NORTHEAST_2 
                      - 12: SA_EAST_1 
                      - 13: CA_CENTRAL_1 
                      - 14: AP_SOUTH_1 
                      - 15: CN_NORTH_1 
                      - 17: US_GOV_WEST_1 
                    
                    When the third-party cloud storage is [Alibaba Cloud](https://www.alibabacloud.com/product/oss) (`vendor` = 2):
                    
                      - 0: CN_Hangzhou 
                      - 1: CN_Shanghai 
                      - 2: CN_Qingdao 
                      - 3: CN_Beijing
                      - 4: CN_Zhangjiakou 
                      - 5: CN_Huhehaote 
                      - 6: CN_Shenzhen 
                      - 7: CN_Hongkong 
                      - 8: US_West_1 
                      - 9: US_East_1 
                      - 10: AP_Southeast_1 
                      - 11: AP_Southeast_2 
                      - 12: AP_Southeast_3 
                      - 13: AP_Southeast_5 
                      - 14: AP_Northeast_1 
                      - 15: AP_South_1 
                      - 16: EU_Central_1 
                      - 17: EU_West_1 
                      - 18: EU_East_1
                    
                    When the third-party cloud storage is [Tencent Cloud](https://intl.cloud.tencent.com/product/cos) (`vendor` = 3):
                    
                      - 0：AP_Beijing_1
                      - 1：AP_Beijing
                      - 2：AP_Shanghai
                      - 3：AP_Guangzhou
                      - 4：AP_Chengdu 
                      - 5：AP_Chongqing 
                      - 6：AP_Shenzhen_FSI 
                      - 7：AP_Shanghai_FSI 
                      - 8：AP_Beijing_FSI 
                      - 9：AP_Hongkong 
                      - 10：AP_Singapore 
                      - 11：AP_Mumbai 
                      - 12：AP_Seoul 
                      - 13：AP_Bangkok 
                      - 14：AP_Tokyo 
                      - 15：NA_Siliconvalley 
                      - 16：NA_Ashburn 
                      - 17：NA_Toronto 
                      - 18：EU_Frankfurt 
                      - 19：EU_Moscow

                bucket:
                  type: string
                  description: The bucket of the third-party cloud storage.
                accessKey:
                  type: string
                  description: The access key of the third-party cloud storage.
                secretKey:
                  type: string
                  description: The secret key of the third-party cloud storage.
                fileNamePrefix:
                  type: array
                  description: >-
                    An array of strings. Sets the path of the recorded files in the third-party cloud storage. For example, if `fileNamePrefix` = `["directory1","directory2"]`, Agora Cloud Recording will add the prefix "`directory1/directory2/`" before the name of the recorded file, that is, `directory1/directory2/xxx.m3u8`. The prefix's length, including the slashes, should not exceed 128 characters. The string itself should not contain any slash. The supported characters are as follows:
                      
                      - The 26 lowercase English letters: a to z                     
                      - The 26 uppercase English letters: A to Z
                      - The 10 numbers: 0 to 9
                    
                  items:
                    type: string
    updateLayout:
      type: object
      required:
        - cname
        - uid
        - clientRequest
      properties:
        cname:
          type: string
          description: The name of the channel to be recorded. 
        uid:
          type: string
          description: A string that contains the UID of the recording client. Must be the same `uid` used in the `acquire` method.
        clientRequest:
          type: object
          description: A specific client request.
          properties:
            maxResolutionUid:
              type: string
              description: When the `layoutType` parameter is set as `2` (vertical layout), you can specify the UID of the large video window by this parameter.
            mixedVideoLayout:
              type: integer
              description: >-
                The video mixing layout. `0`, `1`, and `2` are the [predefined layouts](https://docs.agora.io/en/cloud-recording/cloud_recording_layout). If you set this parameter as `3`, you need to set the layout by the layoutConfig parameter.

                  - 0: Floating layout. The first user in the channel occupies the full canvas. The other users occupy the small regions on top of the canvas, starting from the bottom left corner. The small regions are arranged in the order of the users joining the channel. This layout supports one full-size region and up to four rows of small regions on top with four regions per row, comprising 17 users.
                  
                  - 1: Best fit layout. This is a grid layout. The number of columns and rows and the grid size vary depending on the number of users in the channel. This layout supports up to 17 users.
                  
                  - 2: Vertical layout. One large region is displayed on the left edge of the canvas, and several smaller regions are displayed along the right edge of the canvas. The space on the right supports up to 2 columns of small regions with 8 regions per column. This layout supports up to 17 users.
                  
                  - 3: Customized layout. Set the `layoutConfig` parameter to customize the layout.
                
              default: 0
            backgroundColor:
              type: string
              default: "#000000"
              description: The background color of the canvas (the display window or screen) in RGB hex value. The string starts with a "#". The default value is `"#000000"`, the black color.
            layoutConfig:
              type: array
              description: >-
                An array of the configuration of each user's region. Supports 17 users at most. Each user's region configuration is a JSON object.
              required:
                - x_axis
                - y_axis
                - width
                - height
              items:
                properties:
                  uid:
                    type: string
                    description: The string contains the UID of the user displaying the video in the region. If this parameter is not specified, the configurations apply in the order of the users joining the channel.
                  x_axis:
                    type: number
                    format: float
                    description: The relative horizontal position of the top-left corner of the region. The value is between 0.0 (leftmost) and 1.0 (rightmost). `x_axis` can also be an integer 0 or 1.
                  y_axis:
                    type: number
                    format: float
                    description: The relative vertical position of the top-left corner of the region. The value is between 0.0 (top) and 1.0 (bottom). `y_axis` can also be an integer 0 or 1.
                  width:
                    type: number
                    format: float
                    description: The relative width of the region. The value is between 0.0 and 1.0. `width` can also be an integer 0 or 1.
                  height:
                    type: number
                    format: float
                    description: The relative height of the region. The value is between 0.0 and 1.0. `height` can also be an integer 0 or 1.
                  alpha:
                    type: number
                    format: float
                    default: 1.0
                    description: The transparency of the image. The value is between 0.0 (transparent) and 1.0 (opaque). The default value is 1.0.
                  render_mode:
                    type: integer
                    default: 0
                    description: >-
                      The video display mode.
                    
                        - 0: Cropped mode. Uniformly scales the video until it fills the visible boundaries (cropped). One dimension of the video may have clipped contents.

                        
                        - 1: Fit mode. Uniformly scales the video until one of its dimension fits the boundary (zoomed to fit). Areas that are not filled due to the disparity in the aspect ratio will be filled with black.
    stop:
      type: object
      required:
        - cname
        - uid
        - clientRequest
      properties:
        cname:
          type: string
          description: The name of the channel to be recorded. 
        uid:
          type: string
          description: A string that contains the UID of the recording client. Must be the same `uid` used in the `acquire` method. 
        clientRequest:
          type: object
          description: A specific client request that is empty for this method. 
    acquire_response:
      type: object
      properties:
        resourceId:
          type: string
          description: The resource ID for cloud recording. The resource ID is valid for five minutes.
    start_response:
      type: object
      properties:
        resourceId:
          type: string
          description: The resource ID for cloud recording.
        sid:
          type: string
          description: The recording ID. The unique identification of the current recording.
    updateLayout_response:
      type: object
      properties:
        resourceId:
          type: string
          description: The resource ID for cloud recording.
        sid:
          type: string
          description: The recording ID. The unique identification of the current recording.
    query_response:
      type: object
      properties:
        resourceId:
          type: string
          description: The resource ID for cloud recording.
        sid:
          type: string
          description: The recording ID. The unique identification of the current recording.
        serverResponse:
          type: object
          description: The details about the recording status.
          properties:
            fileListMode:
              type: string
              description: >-
                The data type of `fileList`.
                  
                  - `"string"`: `fileList` is a string. In composite mode, `fileListMode` is always `"string"`.

                  - `"json"`: `fileList` is a JSONArray. In individual mode, `fileListMode` is always `"json"`.            
            fileList:
              type: array
              description: When `fileListMode` is `"string"`, `fileList` is a string that represents the filename of the M3U8 file. When `fileListMode` is `"json"`, `fileList` is a JSONArray that contains the details of each recorded file.
              items:
                properties:
                  filename:
                    type: string
                    description: The name of the M3U8 file.
                  trackType:
                    type: string
                    description: >-
                      The type of the recorded file.
                    
                        - `"audio"`: Audio file.

                        - `"video"`: Video file (no audio).

                        - `"audio_and_video"`: Video file (with audio).                    
                  uid:
                    type: string
                    description: The user whose audio or video is recorded in the file.
                  mixedAllUser:
                    type: string
                    description: >-
                      Whether the audio and video of all users are combined into a single file.
                    
                        - `"true"`: All users are recorded in a single file.

                        - `"false"`: Each user is recorded separately.                      
                  isPlayable:
                    type: string
                    description: >-
                      Whether the file can be played online.
                  
                        - `"true"`: The file can be played online.

                        - `"false"`: The file cannot be played online.                    
                  sliceStartTime:
                    type: string
                    description: The Unix time (ms) when the recording starts.
            status:
              type: integer
              description: >-
                The recording status.
            
                  - 0: The recording has not started.
                  - 1: The initialization is complete.
                  - 2: The recorder is starting.
                  - 3: The uploader is ready.
                  - 4: The recorder is ready.
                  - 5: The first recorded file is uploaded. After uploading the first file, the status is always `5` when the recording is running.
                  - 6: The recording stops.
                  - 7: The Agora Cloud Recording service stops.
                  - 8: The recording is ready to exit.
                  - 20: The recording exits abnormally.
                           
            sliceStartTime:
             type: string
             description: The time when the recording starts. Unix timestamp (ms).
    stop_response:
      type: object
      properties:
        resourceId:
          type: string
          description: The resource ID for cloud recording.
        sid:
          type: string
          description: The unique identification of the current recording.
        serverResponse:
          type: object
          description: The details about the recording status.
          properties:
            fileListMode:
              type: string
              description: >-
                The data type of `fileList`.
                  
                  - `"string"`: `fileList` is a string. In composite mode, `fileListMode` is always `"string"`.

                  - `"json"`: `fileList` is a JSONArray. In individual mode, `fileListMode` is always `"json"`.             
            fileList:
              type: array
              description: When `fileListMode` is `"string"`, `fileList` is a string that represents the filename of the M3U8 file. When `fileListMode` is `"json"`, `fileList` is a JSONArray that contains the details of each recorded file.
              items:
                properties:
                  filename:
                    type: string
                    description: The name of the M3U8 file.
                  trackType:
                    type: string
                    description: >-
                      The type of the recorded file.
                    
                        - `"audio"`: Audio file.

                        - `"video"`: Video file (no audio).

                        - `"audio_and_video"`: Video file (with audio).                      
                  uid:
                    type: string
                    description: The user whose audio or video is recorded in the file.
                  mixedAllUser:
                    type: string
                    description: >-
                      Whether the audio and video of all users are combined into a single file.
                    
                        - `"true"`: All users are recorded in a single file.

                        - `"false"`: Each user is recorded separately.                     
                  isPlayable:
                    type: string
                    description: >-
                      Whether the file can be played online.
                  
                        - `"true"`: The file can be played online.

                        - `"false"`: The file cannot be played online.
                  sliceStartTime:
                    type: string
                    description: The Unix time (ms) when the recording starts.
            uploadingStatus:
              type: string
              description: >-
                The upload status.
              
                  - `"uploaded"`: All the recorded files are uploaded to the third-party cloud storage.

                  - `"backuped"`:  Some of the recorded files fail to upload to the third-party cloud storage and upload to Agora Cloud Backup instead. Agora Cloud Backup automatically uploads these files to your cloud storage. 

                  - `"unknown"`: Unknown status.
  requestBodies:
    acquire:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/acquire'
          example:
            cname: "httpClient463224"
            uid: "527841"
            clientRequest: {
              resourceExpiredHour: 24
            }
      description: The following parameters are required in the request body.
      required: true
    start:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/start'
          example:
            cname: "httpClient463224"
            uid: "527841"
            clientRequest:
              token: "<token if any>"
              recordingConfig:
                maxIdleTime: 30
                streamTypes: 2
                channelType: 0
                videoStreamType: 0
                transcodingConfig:
                  height: 640
                  width: 360
                  bitrate: 500
                  fps: 15
                  mixedVideoLayout: 1
                  backgroundColor: "#FF0000"
                subscribeVideoUids:
                    - "123"
                    - "456"
                subscribeAudioUids:
                    - “123”
                    - “456”
                subscribeUidGroup: 0
              storageConfig:
                accessKey: "xxxxxxf"
                region: 3
                bucket: "xxxxx"
                secretKey: "xxxxx"
                vendor: 2
                fileNamePrefix:
                  - "directory1"
                  - "directory2"
      description: The following parameters are required in the request body.
      required: true
    updateLayout:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updateLayout'
          example:
            cname: "httpClient463224"
            uid: "527841"
            clientRequest:
              mixedVideoLayout: 3
              backgroundColor: "#FF0000"
              layoutConfig: [
                {
                  uid: 1,
                  x_axis: 0.1,
                  y_axis: 0.1,
                  width: 0.1,
                  height: 0.1,
                  alpha: 1.0,
                  render_mode: 1
                },
                {
                  uid: 1,
                  x_axis: 0.1,
                  y_axis: 0.1,
                  width: 0.1,
                  height: 0.1,
                  alpha: 1.0,
                  render_mode: 1
                }
              ]
      description: The following parameters are required in the request body.
      required: true
    query:
      content:
        application/json:
          schema: {}
      description: No parameters are required in the request body.

    stop:
      description: The following parameters are required in the request body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/stop'
          example:
            cname: "httpClient463224"
            uid: "527841"
            clientRequest: {}
  responses:
    201:
      description: The request has been fulfilled, resulting in the creation of a new resource.
    206:
      description: No user in the channel sent a stream during the recording process, or some of the recorded files are uploaded to the Agora Cloud Backup instead of the third-party cloud storage.
    400:
      description: The server cannot process the request due to malformed request syntax.
    401:
      description: Unauthorized (incorrect App ID/Customer Certificate).
    404:
      description: The requested resource could not be found. 
    500:
      description: Internal server error.
    504:
      description: The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.
  securitySchemes:
    agora_auth:
      type: http
      scheme: basic
